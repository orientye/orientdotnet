// Code generated by crpc-protobuf-plugin. DO NOT EDIT.
// source: helloworld.proto

using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using CRpc.Rpc;
using CRpc.Rpc.CRpc.Codec;
using CRpc.Rpc.CRpc.Server;

namespace Example {

public abstract class GreeterBase : IRpcService
{
    public int GetServiceId()
    {
        return 1000;
    }

    public Task<(int, byte[])> OnMessageAsync(IRpcContext context, IRpcMessage req)
    {
        var rpcContext = (CRpcContext)context;
        var rpcReq = (CRpcMessage)req;
        var methodId = rpcReq.getMethodId();
        if (methodId == 1) { return this.__OnMessageSayHelloAsync(rpcContext, rpcReq); }
        return Task.FromResult((-1, Array.Empty<byte>()));
    }

    private async Task<(int, byte[])> __OnMessageSayHelloAsync(CRpcContext context, CRpcMessage req)
    {
        var request = Example.HelloRequest.Parser.ParseFrom(req.getBody());
        var (result, data) = await SayHelloAsync(context, request);
        var bytes = data.ToByteArray();
        return (result, bytes);
    }

    // Please implement the following:
    protected abstract Task<(int, Example.HelloReply)> SayHelloAsync(CRpcContext context, Example.HelloRequest request);
}
}

